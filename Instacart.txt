Datasets I used 
-
#https://s3.amazonaws.com/hackerday.datascience/87/order_products__train.csv
#https://s3.amazonaws.com/hackerday.datascience/87/orders.csv
#https://s3.amazonaws.com/hackerday.datascience/87/products.csv
#https://s3.amazonaws.com/hackerday.datascience/87/aisles.csv
#https://s3.amazonaws.com/hackerday.datascience/87/departments.csv
#https://s3.amazonaws.com/hackerday.datascience/87/sample_submission.csv
#https://s3.amazonaws.com/hackerday.datascience/87/order_products__prior.csv

***************************CODE  STARTS ************
library(plyr);
library(dplyr);
library(ggplot2);
library(Hmisc);
library(readr);
library(arules);
library(arulesViz);
library(stringr);
library(data.table);
library(methods);
library(knitr);
library(RColorBrewer);

orders <- fread("https://s3.amazonaws.com/hackerday.datascience/87/orders.csv");
products<-fread('https://s3.amazonaws.com/hackerday.datascience/87/products.csv');

order_products_prior <- fread('https://s3.amazonaws.com/hackerday.datascience/87/order_products__prior.csv');
order_products_train <- fread('https://s3.amazonaws.com/hackerday.datascience/87/order_products__train.csv');
aisles <- fread('https://s3.amazonaws.com/hackerday.datascience/87/aisles.csv');
departments <- fread('https://s3.amazonaws.com/hackerday.datascience/87/departments.csv');

# Which day of the week Instacart received most orders?
orders$day_week_name <- 
  ifelse(orders$order_dow == 0,
         'Sunday',
         ifelse(orders$order_dow == 1,
                'Monday',
                ifelse(orders$order_dow == 2,
                       'Tuesday',
                       ifelse(orders$order_dow == 3,
                              'Wednesday',
                              ifelse(orders$order_dow == 4,
                                     'Thursday',
                                     ifelse(orders$order_dow == 5,
                                            'Friday',
                                            ifelse(orders$order_dow == 6,
                                                   'Saturday',"")))))));



orders$day_ordered <- factor(orders$day_week_name,levels = c("Sunday",
                                                             "Monday",
                                                             "Tuesday",
                                                             "Wednesday",
                                                             "Thursday",
                                                             "Friday",
                                                             "Saturday"));

#Visual display of orders placed by different days of the week
dow_graph <- barplot(
  table(orders$day_ordered),
  main = "Total Orders by Day",
  xlab = 'Days',
  ylab = 'Number of Orders',
  col = 'blue');

text(
  x = dow_graph,
  y = table(orders$day_ordered),
  labels = table(orders$day_ordered),
  pos = 1,
  cex = 1.0,
  col = 'white'
);

# Exploratory data analysis
orders <- fread("https://s3.amazonaws.com/hackerday.datascience/87/orders.csv");
products<-fread('https://s3.amazonaws.com/hackerday.datascience/87/products.csv');
order_products_prior <- fread('https://s3.amazonaws.com/hackerday.datascience/87/order_products__prior.csv');
order_products <- fread('https://s3.amazonaws.com/hackerday.datascience/87/order_products__train.csv')
aisles <- fread('https://s3.amazonaws.com/hackerday.datascience/87/aisles.csv');
departments <- fread('https://s3.amazonaws.com/hackerday.datascience/87/departments.csv');

kable(head(orders,12));
kable(head(order_products,10));
kable(head(products,10));
kable(head(order_products_prior,10));
kable(head(aisles,12));
kable(head(departments,12));

# Recording the variables

orders <- orders %>%
  mutate(order_hour_of_day = as.numeric(order_hour_of_day),
         eval_set = as.factor(eval_set));
products <- products %>%
  mutate(product_name = as.factor(product_name));

aisles <- aisles %>%
  mutate(aisle = as.factor(aisle));

departments <- departments %>%
  mutate(department = as.factor(department));

# Visualization for orders by hour of the day
orders %>%
  ggplot(aes(x=order_hour_of_day)) +
  geom_histogram(stat = 'count',fill='blue');

#Check if there is any effect of day of the week on orders

orders %>%
  ggplot(aes(x=order_dow)) +
  geom_histogram(stat = 'count',fill='red');

#My conclusion: most orders are placed on Sunday==0, and Monday==1

#Do people order more often after exactly 1 week?

orders %>%
  ggplot(aes(x=days_since_prior_order)) +
  geom_histogram(stat='count',fill='orange');

 
#Conclusion: yes they do order more often after exactly 1 week

#Check number of prior orders placed?

orders %>% filter(eval_set=='prior') %>% count_(orders,'order_number') %>%
  ggplot(aes(order_number,n)) + geom_line(color='red',size=1);

#From the training data set 

order_products %>%
  group_by(order_id) %>%
  summarise(n_items=last(add_to_cart_order)) %>%
  ggplot(aes(x=n_items)) +
  geom_histogram(stat = 'count',fill='red') +
  geom_rug() #+
  #coord_cartesian(xlim = c(0,80));


order_products_prior %>%
  group_by(order_id) %>%
  summarise(n_items=last(add_to_cart_order)) %>%
  ggplot(aes(x=n_items)) +
  geom_histogram(stat = 'count',fill='red') +
  geom_rug();

order_products_prior[1:10,];
products[1:10,];

mydata <- order_products_prior[,1:2];
mydata <- merge(mydata,products,by='product_id');

mydata <- arrange(mydata,order_id);
head(mydata);

mydata<- mydata[,c(2,3)];
head(mydata);

# Data set is disjoint,and need to convert available information to transactional dataset for market basket anlysis
dt <- split(mydata$product_name,mydata$order_id);
dt2 = as(dt,'transactions');
summary(dt2);
inspect(dt2)[[5]];


#Visualizing the most frequent item sets in this dataset
itemFrequency(dt2,type='relative');
itemFrequencyPlot(dt2,topN=20,type='relative');
itemFrequencyPlot(dt2,topN=50,type='absolute');

# Creating the rules
rule_1 = apriori(dt2,parameter = list(support=0.00001,confidence=0.90));                                     
plot(rule_1,control = list(col=brewer.pal(11,"Spectral")),main="");


rule_2 = apriori(dt2,parameter = list(support=0.0001,confidence=0.90));                                    
plot(rule_2,control = list(col=brewer.pal(11,"Spectral")),main="");


rule_3 = apriori(dt2,parameter = list(support=0.001,confidence=0.90));                                     
plot(rule_3,control = list(col=brewer.pal(11,"Spectral")),main="");

summary(rule_3);

rule_4 <- apriori(dt2, parameter = list(support=0.001,confidence=0.8,minlen=3));
                                   
rule_5 <- apriori(dt2,parameter = list(support=0.001,confidence=0.8,maxlen=4));


# Converting the rules into a data frame                                   
rules3 = as(rule_3,'data.frame');
inspect(subset(rule_3,subset= rhs %pin% 'Banana'));

plot(rule_3,method = 'graph',control = list(type='items',main=''));

subrule3 <- head(sort(rule_3,by='lift'),10);

plot(subrule3,method = 'graph',control = list(type='items',main=''));

                                   
# Identify and clearing the unnecessary rules                   
subset.matrix = is.subset(rule_3,rule_3);
subset.matrix[lower.tri(subset.matrix,diag = T)] <- NA;

redundant = colSums(subset.matrix, na.rm = T) >= 1;
which(redundant);
rule3_pruned <- rule_3[!redundant];
rules<-rule3_pruned;

#Cleaning the rules
inspect(rules);



 



